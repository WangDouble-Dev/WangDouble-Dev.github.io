[{"categories":["其它"],"contents":" 某天用PHPStorm写代码的时候，代码突然不提示了,不会自动补全及导入类了。代码编写速度直线下降。\n检查了很多设置，最后发现是IDE的Power Save Mode模式开启了。\n通常，IDE（集成开发环境）的省电模式是为了在使用电池供电时减少系统资源的使用，以延长电池寿命。省电模式通常涉及一系列设置和调整，以降低软件的性能需求，从而减少能耗。这些调整可能包括：\n自动保存设置： 将自动保存的频率调整为更长的时间间隔，以减少IO操作。\n自动代码分析： 降低代码分析的频率或关闭一些耗费资源的代码检查功能。\n自动代码补全： 可能会降低或禁用自动代码补全功能，因为它通常需要消耗一定的计算资源。\n实时语法检查： 减少或关闭实时语法检查，以降低对系统资源的占用。\n背景任务： 延迟或限制一些后台任务的执行，以减少对CPU和内存的需求。\n界面动画和效果： 禁用一些界面动画和特效，以减少对图形处理单元（GPU）的负担。\n插件管理： 停用不必要的插件，因为一些插件可能在后台执行任务，增加了系统负担。\n缓存策略： 调整缓存策略，减少缓存刷新的频率。\n关闭省电模式方法：\n通过点击IDE的右下角的电源图标，关闭Power Save Mode模式。 也可以通过File -\u0026gt; Power Save Mode菜单项来切换Power Save Mode模式。 参考文档：\nPHPStorm禁用自动突出显示用法 ","date":"2024-02-25T13:24:05+08:00","permalink":"https://WangDouble-Dev.github.io/post/ide_power_save_mode/","section":"post","tags":["IDE","PHPStorm","Power Save Mode"],"title":"IDE|PHPStorm Power Save Mode模式开启导致代码不提示及自动补全失效"},{"categories":["PHP"],"contents":"PHP include和require的区别 在PHP中，include和require都是用于在代码中包含文件的语句，但它们有一些重要的区别。\n错误处理方式： include：如果文件未找到或者包含过程中出现错误，include 会产生一个警告，但脚本会继续执行。 require：如果文件未找到或者包含过程中出现错误，require 会产生一个致命错误，并停止脚本的执行。 返回值： include：如果包含文件成功，include 语句返回 1；如果失败，返回 FALSE。 require：如果包含文件成功，require 语句返回 1；如果失败，返回 FALSE。 使用场景： include 用于包含可选的文件，即使文件不存在或包含失败，脚本仍然会继续执行。 require 用于包含必须的文件，如果文件不存在或包含失败，脚本会停止执行，这在必须依赖某个文件的情况下很有用。 总的来说，选择使用 include 还是 require 取决于你对脚本执行的期望和对错误处理的需求。如果文件的存在对程序的正常运行不是必须的，那么使用 include 可能更合适。如果文件的存在对程序是必须的，那么使用 require 会更适合，因为它能在必要时中止脚本的执行。 预定义变量 点击此处查看\n使用 PHP 函数对变量 $x 进行比较 types.comparisons.php\nPHP支持多线程吗？ PHP 本身的标准版本并不直接支持真正的多线程。PHP 的主要运行模型是基于请求-响应的，每个请求都在一个独立的进程中处理。在这个模型下，PHP 是单线程运行的，每个请求都有自己的上下文，不共享数据。\n然而，PHP 提供了一些扩展和库，以支持并发编程或者异步操作，使得可以在某种程度上模拟多线程的效果。以下是一些与并发和异步相关的 PHP 扩展和库：\nSwoole： 是一个基于 C 语言开发的高性能异步、协程并发网络通信引擎。Swoole 提供了协程和异步 I/O 支持，可以用于编写高并发的服务器程序。 虽然上述方法可以用于处理并发任务，但需要注意的是，PHP 不是为真正的多线程编程而设计的。对于需要更严格的多线程控制和共享内存等需求，其他语言如 Java 或 C++ 更为适用。\n编程基础 什么是AOP面向切面编程 \u0026ldquo;AOP\u0026rdquo; 代表的是 \u0026ldquo;Aspect-Oriented Programming\u0026rdquo;，即面向切面编程。AOP 是一种编程范式，旨在通过分离关注点（concerns）来提高代码的模块化性和可维护性。\n在传统的面向对象编程（OOP）中，程序的功能通常被划分为各个类，每个类负责一个特定的功能。然而，有时一些横切关注点（cross-cutting concerns）会横穿多个类，例如日志记录、性能监控、事务管理等。AOP 的目标是通过在这些关注点上划定切面（Aspect），从而将其与主要业务逻辑分开，提高代码的模块化程度。\n关键概念和术语：\nAspect（切面）： 一个横切关注点的模块。它定义了在程序中的哪个地方（切点）以及如何（通知）执行横切关注点的逻辑。\nJoin Point（连接点）： 在程序执行过程中可能被切面拦截的点。通常是方法调用、异常抛出或字段访问等。\nAdvice（通知）： 切面在连接点执行的代码。通知包括 \u0026ldquo;before\u0026rdquo;（前置通知，事前执行）、\u0026ldquo;after\u0026rdquo;（后置通知，事后执行）、\u0026ldquo;around\u0026rdquo;（环绕通知，可以在连接点前后自定义操作）等。\nPointcut（切点）： 定义了连接点的集合，使切面知道在何处执行通知。\nAOP 提供了一种在不改变主要业务逻辑的情况下，将横切关注点模块化的方式。这有助于提高代码的可维护性、可重用性，并降低了代码中的重复性。通过使用 AOP，程序员可以更好地管理横切关注点，而无需将这些关注点散布在整个代码库中。\n雪花算法 雪花算法（Snowflake Algorithm）是一种用于生成全局唯一标识符（UUID）的分布式系统中的算法。它最初由Twitter开发，用于生成分布式系统中的唯一ID，以确保在不同的节点和不同的时间生成的ID都是唯一的。\n雪花算法的ID结构通常包含64位，按照特定的位数分布，具体如下：\n1位标识位（固定为0，表示正数） 41位时间戳（精确到毫秒级，可以支持69年的时间） 10位机器标识（用来表示不同的机器，可以部署在2^10台机器上） 12位序列号（每台机器每毫秒可以生成2^12个ID） 雪花算法的生成过程如下：\n获取当前时间戳，41位。 获取机器标识，10位。 获取序列号，12位。 将它们组合成64位的ID。 需要注意的是，雪花算法依赖于系统时钟，因此如果系统时钟发生回退，可能会导致生成的ID不是严格递增的。为了解决这个问题，一般建议在系统中配置时钟同步服务。\n雪花算法通过合理分配各部分的位数，保证了在同一时刻、同一机器上生成的ID是唯一的，同时在分布式环境中生成的ID也尽可能保持有序。\n\u0026lt;?php class Snowflake { private $epoch = 1625097600000; // 起始时间戳，这里设置为2021-07-01 00:00:00的毫秒表示 private $machineId; private $sequence = 0; private $machineIdBits = 10; private $sequenceBits = 12; private $maxMachineId; private $maxSequence; public function __construct($machineId) { $this-\u0026gt;maxMachineId = -1 ^ (-1 \u0026lt;\u0026lt; $this-\u0026gt;machineIdBits); $this-\u0026gt;maxSequence = -1 ^ (-1 \u0026lt;\u0026lt; $this-\u0026gt;sequenceBits); if ($machineId \u0026gt; $this-\u0026gt;maxMachineId || $machineId \u0026lt; 0) { throw new Exception(\u0026#34;Invalid machine ID\u0026#34;); } $this-\u0026gt;machineId = $machineId; } public function generateId() { $currentTimestamp = $this-\u0026gt;getTimestamp(); if ($currentTimestamp \u0026lt; $this-\u0026gt;lastTimestamp) { throw new Exception(\u0026#34;Clock moved backwards. Refusing to generate ID\u0026#34;); } if ($currentTimestamp == $this-\u0026gt;lastTimestamp) { $this-\u0026gt;sequence = ($this-\u0026gt;sequence + 1) \u0026amp; $this-\u0026gt;maxSequence; if ($this-\u0026gt;sequence == 0) { $currentTimestamp = $this-\u0026gt;waitNextMillis($this-\u0026gt;lastTimestamp); } } else { $this-\u0026gt;sequence = 0; } $this-\u0026gt;lastTimestamp = $currentTimestamp; $id = (($currentTimestamp - $this-\u0026gt;epoch) \u0026lt;\u0026lt; ($this-\u0026gt;machineIdBits + $this-\u0026gt;sequenceBits)) | ($this-\u0026gt;machineId \u0026lt;\u0026lt; $this-\u0026gt;sequenceBits) | $this-\u0026gt;sequence; return $id; } private function getTimestamp() { return round(microtime(true) * 1000); } private function waitNextMillis($lastTimestamp) { $timestamp = $this-\u0026gt;getTimestamp(); while ($timestamp \u0026lt;= $lastTimestamp) { $timestamp = $this-\u0026gt;getTimestamp(); } return $timestamp; } } // 示例使用，创建一个机器ID为1的Snowflake对象 $snowflake = new Snowflake(1); // 生成ID $id = $snowflake-\u0026gt;generateId(); // 输出生成的ID echo $id; ?\u0026gt; MySQL 三范式 数据库的三范式是关系型数据库设计中的一组规范，用于确保数据库中的数据结构合理、有效、减少冗余。这三个范式是：\n第一范式（1NF）： 数据表中的每一列都是不可再分的原子数据项。换句话说，表中的每个字段必须是单一值，而不能是一组值或是可再分的值。确保每列的原子性。\n例如，一个包含学生姓名和其课程的表：\n学生姓名 所修课程 小明 数学, 物理, 化学 不符合第一范式，应该拆分为两个表。\n第二范式（2NF）： 在满足第一范式的基础上，表中的非主键列（非主键属性）完全依赖于整个主键。换句话说，每个非主键列都必须完全依赖于表的主键。\n例如，一个包含学生课程成绩的表：\n学生ID 课程 教师 分数 1 数学 张老师 90 1 物理 王老师 85 这个表不符合第二范式，应该拆分成两个表，分别存储学生课程信息和成绩信息。\n第三范式（3NF）： 在满足第二范式的基础上，任何非主键列都不传递依赖于主键。换句话说，表中的每个非主键列都直接依赖于主键，而不是依赖于其他非主键列。\n例如，一个包含学生地址和学生所在城市的表：\n学生ID 学生姓名 学生地址 所在城市 1 小明 123 Main St Beijing 这个表不符合第三范式，应该将学生地址和所在城市拆分成两个表，以避免传递依赖。\n遵循三范式有助于设计更规范、减少冗余、易于维护的数据库结构。然而，有时为了性能或其他需求，可能会选择违反三范式的原则。在设计数据库时，需要权衡三范式的优势和具体应用场景的需求。\nInnoDB和MyISAM InnoDB和MyISAM是MySQL数据库两种常见的存储引擎，它们在设计、性能特性和适用场景上有一些区别：\n事务支持：\nInnoDB： 支持事务（ACID兼容），可以提供较高的并发性和数据完整性。适用于需要事务支持的应用，如银行系统、订单处理系统等。 MyISAM： 不支持事务，只支持表级别的锁，对并发性能的支持相对较弱。适用于读操作较多、写操作较少的简单应用。 锁级别：\nInnoDB： 支持行级锁定，允许多个事务同时操作不同行。这有助于提高并发性，减少锁冲突。 MyISAM： 只支持表级锁定，当一个事务对表进行写操作时，其他事务无法同时对同一表进行写操作，可能会导致锁冲突和性能下降。 崩溃恢复：\nInnoDB： 支持崩溃恢复，具有更好的容错性。在数据库发生崩溃时，InnoDB可以通过日志文件来进行恢复，保持数据的一致性。 MyISAM： 对崩溃恢复的支持相对较弱，容易出现损坏的情况。在发生崩溃时，可能需要手动修复表。 外键约束：\nInnoDB： 支持外键约束，保证数据的完整性。可以通过定义外键来建立表与表之间的关联。 MyISAM： 不支持外键约束，需要在应用层面来保证数据的一致性。 全文索引：\nInnoDB： 支持全文索引，可以用于实现全文搜索。 MyISAM： 也支持全文索引，并在某些情况下可能比InnoDB更快。 表空间和缓存：\nInnoDB： 支持表空间，表数据和索引存储在相同的文件中。使用缓冲池来缓存数据和索引，支持自动调整。 MyISAM： 不支持表空间，表数据和索引分开存储。使用键缓存来缓存索引，使用操作系统的缓存来缓存数据。 自增主键：\nInnoDB： 自增主键是在表的聚簇索引上实现的，因此表的物理顺序与主键的顺序一致。 MyISAM： 自增主键的实现是在一个独立的文件上，不直接影响表的物理顺序。 根据应用需求和性能特点，选择合适的存储引擎是很重要的。通常，对于需要事务支持、并发性能高以及容错性好的应用，InnoDB是更好的选择；而对于读操作较多、写操作较少、对事务支持要求不高的应用，MyISAM可能是一个合适的选择。\n事务的特征 事务是数据库管理系统中用来管理对数据库的访问和更新的一个操作单元。事务应该具备四个基本特性，通常被称为ACID特性：\n原子性（Atomicity）： 原子性要求事务是一个不可分割的最小工作单元，要么完全执行，要么完全不执行。如果事务的所有操作都成功完成，则事务被认为是原子的；如果任何一个操作失败，则整个事务应该被回滚到初始状态，以确保数据的一致性。\n一致性（Consistency）： 一致性确保事务将数据库从一种一致性状态转移到另一种一致性状态。在事务执行前后，数据库应该保持一致性，即事务的执行不会破坏数据库的完整性约束。如果一个事务执行完毕后，数据库不再保持一致性，系统会回滚事务，使数据恢复到事务开始前的状态。\n隔离性（Isolation）： 隔离性要求一个事务的执行不能被其他事务干扰。即使多个事务并发执行，每个事务都应该认为它在独立地操作数据。这可以通过使用锁或其他并发控制机制来实现，以防止不同事务之间的相互影响。\n持久性（Durability）： 持久性确保一旦事务被提交，其结果就是永久性的，即使系统发生故障也不会丢失。一旦事务成功提交，对数据库的修改应该永久保存在数据库中，以便在系统故障后能够恢复。\n这些ACID特性确保了数据库事务的可靠性和一致性。在设计和执行数据库操作时，开发人员和数据库管理员需要特别关注这些特性，以确保数据的正确性和系统的稳定性。\n数据库事务隔离级别 MySQL的默认隔离级别是REPEATABLE READ（可重复读）\n数据库事务隔离级别是指在并发执行的多个事务中，一个事务对数据库中数据的修改在其他事务看来是隔离的程度。数据库管理系统定义了多个隔离级别，以平衡并发性能和数据一致性之间的关系。主要的事务隔离级别包括：\n读未提交（Read Uncommitted）：\n允许一个事务读取另一个事务未提交的数据。 最低的隔离级别，可能导致脏读（读取到未提交的数据）、不可重复读和幻读。 读已提交（Read Committed）：\n保证一个事务不会读取到另一个未提交事务的数据。 避免了脏读，但仍可能存在不可重复读和幻读问题。 可重复读（Repeatable Read）：\n保证在同一事务中多次读取相同数据时，得到的结果是一致的。 避免了脏读和不可重复读，但仍可能存在幻读问题。 串行化（Serializable）：\n最高的隔离级别，确保事务之间完全隔离，不会发生脏读、不可重复读和幻读。 通过对数据加锁来实现，可能导致并发性能下降。 在实际应用中，可以根据业务需求和性能要求选择适当的事务隔离级别。更高的隔离级别通常会带来更多的锁和资源消耗，降低并发性能，因此需要权衡。对于一些特定的业务场景，可以使用数据库提供的特定机制来解决特定的并发问题，而不是仅仅依赖隔离级别。例如，使用行级锁、表级锁或乐观锁等。\nInnodb中的事务隔离级别和锁的关系\n数据库事务隔离级别相关的并发问题 与数据库事务隔离级别相关的并发问题主要包括脏读、不可重复读和幻读。这些问题是由于多个事务同时访问和修改数据库时可能发生的情况，而不同的隔离级别会在处理这些问题上有不同的策略。\n脏读（Dirty Read）：\n定义： 一个事务读取了另一个事务未提交的数据。 影响隔离级别： 读未提交（Read Uncommitted）隔离级别可能导致脏读。 解决方案： 提高隔离级别至读已提交（Read Committed）及以上，以避免脏读问题。 不可重复读（Non-repeatable Read）：\n定义： 在一个事务中，两次读取同一行数据时得到了不同的结果，因为在两次读取之间有另一个事务修改了该行数据。 影响隔离级别： 读已提交（Read Committed）隔离级别可能导致不可重复读。 解决方案： 提高隔离级别至可重复读（Repeatable Read）及以上，通过锁定读取的数据来防止其他事务的修改。 幻读（Phantom Read）：\n定义： 一个事务在读取了一组数据后，又发现了另一个事务插入了一些新的数据，导致第一次读取和第二次读取得到的数据集不一致。 影响隔离级别： 可重复读（Repeatable Read）隔离级别可能导致幻读。 解决方案： 提高隔离级别至串行化（Serializable），通过更强的锁定机制来防止其他事务的插入或删除操作。 不同的隔离级别提供了不同的权衡方案，高隔离级别通常可以解决并发问题，但可能会带来性能的降低。在选择隔离级别时，需要根据应用的特定需求和对并发问题的容忍程度做出权衡。\n什么是MVCC MVCC（Multi-Version Concurrency Control）是一种数据库并发控制的机制，旨在解决在多个事务同时访问数据库时可能发生的并发问题，包括脏读、不可重复读和幻读等。MVCC通过维护多个版本的数据，使得每个事务看到的数据是一个\u0026quot;快照\u0026quot;，从而提供了更高的并发性和事务隔离性。\nMVCC的实现通常包括以下关键概念：\n版本号：\n每个数据行都会有一个版本号或者时间戳，用于标识该数据行的版本。版本号可以是一个递增的整数，也可以是一个时间戳。 Read View（读视图）：\n每个事务在启动时都会创建一个Read View，该视图包含了在该事务开始之前已经提交的事务的版本信息。 Read View定义了事务能够看到的数据版本，包括已提交事务的版本以及当前事务自身的修改。 Undo Log（回滚日志）：\n当一个事务更新一条记录时，数据库会在Undo Log中保存该记录的一个旧版本。这个旧版本的数据对于其他并发事务是可见的。 如果事务需要回滚，可以使用Undo Log来撤销该事务对数据的修改。 读操作：\n当事务执行读操作时，会根据自己的Read View，查找符合条件的已提交事务的数据版本，确保事务看到的是在它开始之前已经提交的数据。 如果读取的数据版本比事务的Read View的范围要新，则会使用Undo Log来获取旧版本的数据。 写操作：\n当事务执行写操作时，会将修改的数据写入一个新的版本，并将旧版本的数据保存到Undo Log中。其他事务仍然可以读取旧版本的数据。 写操作的版本号通常会递增，确保新版本的数据在数据库中成为最新的数据。 提交：\n当事务提交时，它的修改变成了其他事务的可见版本，并且新版本的数据在数据库中成为最新的数据。 MVCC的优势在于提高了数据库的并发性能，多个事务可以并发地读取和修改数据，而不会出现数据一致性问题。MVCC被广泛用于支持数据库的各种隔离级别，如可重复读和读已提交。主流的关系型数据库，如MySQL、PostgreSQL等，都采用了MVCC机制。\nMySQL的可重复读隔离级别是如何解决幻读的 在MySQL的可重复读（REPEATABLE READ）隔离级别下，通过多版本并发控制（MVCC，Multi-Version Concurrency Control）机制来解决幻读问题。MVCC使得每个事务看到的数据是一个\u0026quot;快照\u0026quot;，并且不会受到其他并发事务的影响。\n解决幻读问题的主要方法是通过在事务中读取的数据上加锁，防止其他事务插入或删除与读取操作相关的数据。以下是MVCC是如何实现的：\nRead View（读视图）：\n在可重复读隔离级别下，每个事务启动时都会创建一个Read View，用于表示事务开始时数据库的状态。这个Read View包含了所有在该事务开始之前已经提交的事务对数据的影响。 Undo Log（回滚日志）：\n当一个事务更新一条记录时，MySQL会在Undo Log中保存该记录的一个旧版本。这样，其他事务在查询时，即使有其他事务在更新，也可以读取到旧版本的数据。 Read View的生成和使用：\n在可重复读隔离级别下，事务在启动时会生成一个Read View，用于表示事务开始时的数据库状态。这个Read View包含了所有已提交的事务对数据的影响。 当一个事务执行查询时，只会看到在它开始时已经提交的事务对数据的影响，不会看到其他事务在它开始之后提交的事务的影响。 当事务中的查询操作涉及到范围查询时，Read View还会对查询的范围进行锁定，防止其他事务在该范围内插入或删除数据。 通过这种方式，可重复读隔离级别可以避免幻读问题。即使在一个事务中执行范围查询，在该事务内的其他事务插入新数据也不会被当前事务看到，因为Read View锁定了查询范围。这种机制确保了事务在可重复读隔离级别下的一致性和隔离性。\nMySQL 有哪些锁？ 如果按锁粒度划分，有以下 3 种：\n表锁：开销小，加锁快；锁定力度大，发生锁冲突概率高，并发度最低；不会出现死锁。 行锁：开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。 页锁：开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般。 如果按照兼容性，有 2 种：\n共享锁（S Lock）,也叫读锁（read lock），相互不阻塞。 排他锁（X Lock），也叫写锁（write lock），排它锁是阻塞的，在一定时间内，只有一个请求能执行写入，并阻止其它锁读取正在写入的数据。 MySQL索引数据结构 MySQL 索引的数据结构主要有以下几种：\nB树（或B+树）索引：\nB树： 平衡树结构，包含根节点、内部节点和叶子节点。每个节点包含多个键值对，按照键值大小有序排列。 B+树： 在B树的基础上做了优化，将数据只存储在叶子节点，而内部节点只存储键值和指向子节点的指针。叶子节点通过链表连接，形成有序的叶子节点序列。 特点： B+树适用于范围查询，因为叶子节点是有序的，范围查询只需要遍历叶子节点链表即可。B+树的叶子节点包含了完整的键值信息，适合做范围查询和顺序遍历。 适用场景： 大多数数据库引擎（如InnoDB）使用B+树索引结构。 哈希索引：\n特点： 哈希索引是通过哈希函数计算键值的哈希值，然后在哈希表中直接查找。哈希索引适用于等值查询，即通过哈希值直接定位到具体的记录。 优点： 哈希索引查询速度非常快，对于等值查询非常高效。 缺点： 不支持范围查询，也不适用于排序和顺序遍历。哈希碰撞（多个键值映射到相同的哈希值）可能导致性能下降。 适用场景： 适合于主键等值查询，不适合需要范围查询或顺序遍历的场景。 全文索引：\n特点： 全文索引用于对文本数据进行全文搜索，提供更复杂的搜索能力。MySQL中常用的全文索引是基于倒排索引实现的，它包含了文本中的关键词及其出现位置。 适用场景： 适用于需要进行全文搜索的场景，如文章搜索、博客系统等。 在实际应用中，选择合适的索引类型取决于具体的查询需求。通常，对于大多数场景，B+树索引是一个较为通用和高效的选择，而哈希索引适用于特定的等值查询场景。全文索引则用于需要进行全文搜索的情况。\n聚集索引、非聚集索引 聚集索引和非聚集索引是数据库中两种不同的索引组织方式。它们影响着数据在磁盘上的存储结构和检索方式。\n聚集索引（Clustered Index）：\n聚集索引决定了数据表中行的物理存储顺序，并且整个表的数据按照聚集索引的顺序进行存储。一张表只能有一个聚集索引。 当表有聚集索引时，数据行按照聚集索引的排序方式存储在磁盘上，而聚集索引本身也是表的一部分，即数据行和聚集索引共享相同的存储空间。 常见的例子是在SQL Server中，主键约束默认就是一个聚集索引。 非聚集索引（Non-Clustered Index）：\n非聚集索引是独立于实际数据存储顺序的索引结构。一张表可以有多个非聚集索引。 非聚集索引包含索引的键值和一个指向实际数据行的指针或者位置信息。查询时通过非聚集索引定位到数据行，然后再根据指针或位置信息获取实际数据。 非聚集索引的存在使得可以根据不同的列创建多个索引，提高检索的灵活性。但由于需要额外的指针或位置信息，可能会导致相对较大的存储开销。 总体而言，聚集索引和非聚集索引在数据库设计和性能方面有不同的权衡。聚集索引适合那些经常需要按照某个顺序访问数据的情况，而非聚集索引适合提高灵活性，允许通过多个列进行检索。在具体的数据库系统中，实现方式和性能表现可能会有所不同。\n什么情形下索引失效 索引在数据库中的目的是提高查询性能，但在一些情况下，索引可能会失效，导致无法充分利用索引的优势。以下是一些导致索引失效的常见情形：\n使用函数或运算符：\n当在查询中对索引列使用函数或运算符时，索引可能会失效。例如，WHERE LOWER(column_name) = 'value'或WHERE column_name + 10 = 20。 不满足最左前缀原则：\n如果索引是复合索引（包含多个列），则查询时必须按照索引的最左前缀列开始，否则索引可能失效。例如，索引是 (column1, column2)，查询条件中如果只使用了 column2 而没有使用 column1，那么索引可能无法生效。 隐式数据类型转换：\n当查询中对索引列进行了隐式的数据类型转换时，索引可能失效。例如，索引是整数类型，但查询时对该列进行了字符型的比较。 使用通配符在索引列开头：\n当使用通配符在索引列的开头进行模糊匹配时，索引可能失效。例如，WHERE column_name LIKE '%value'。 使用非SARGABLE条件：\nSARGABLE（Search ARGument ABLE）条件是指能够利用索引进行搜索的条件。如果使用了非SARGABLE的条件，例如在索引列上进行了计算，那么索引可能会失效。 列上存在 NULL 值：\n对于包含 NULL 值的列，查询时如果使用了 IS NULL 或 IS NOT NULL 条件，可能导致索引失效。 统计信息不准确：\n数据库系统根据统计信息来生成查询计划。如果统计信息不准确，可能导致数据库系统选择不合适的查询计划，使得索引失效。 表被锁定：\n当表被锁定时，查询可能无法使用索引。例如，当表上存在写操作或者被其他事务锁定时。 要避免索引失效，可以通过正确设计索引、编写符合SARGABLE条件的查询、避免函数和运算符的使用等方式来提高索引的有效性。数据库系统的查询执行计划和性能分析工具可以帮助检测和解决索引失效的问题。\n数据库索引优化 索引是提高数据库查询性能的重要手段之一。以下是一些常用的索引优化策略：\n选择合适的索引：\n根据查询语句的特点选择合适的索引，通常应考虑到查询中涉及的字段、表的大小、查询频率等因素。 在常用的查询条件上建立索引，但不要过度索引，因为每个索引都会占用额外的存储空间，并影响写操作的性能。 联合索引：\n对于经常一起查询的列，可以考虑建立联合索引。联合索引的顺序很重要，应该根据查询的频率和使用率来选择合适的列顺序。 覆盖索引：\n尽量使用覆盖索引，即索引中包含了查询所需的所有列。这样可以避免回表操作，提高查询性能。 避免在索引列上进行计算：\n尽量避免在索引列上进行计算或函数操作，这样可以保证索引的有效使用。例如，避免在索引列上使用WHERE YEAR(date_column) = 2022，而直接使用WHERE date_column BETWEEN '2022-01-01' AND '2022-12-31'。 定期分析查询计划：\n使用EXPLAIN语句来分析查询计划，查看MySQL执行查询时使用的索引和表的访问方式。通过分析查询计划，可以发现潜在的性能问题，并进行相应的优化。 避免使用通配符前缀：\n避免在索引列上使用通配符前缀，例如LIKE '%abc'。通配符前缀会导致索引失效，应尽量避免使用。 定期优化表：\n定期使用OPTIMIZE TABLE语句来优化表，重新组织表的物理存储结构，提高查询性能。 避免使用不等于（!=或\u0026lt;\u0026gt;）：\n在查询条件中尽量避免使用不等于操作符，因为不等于操作符可能导致索引失效，影响查询性能。 使用合理的数据类型：\n使用合适大小的数据类型，可以减小索引的大小，提高查询性能。 限制返回结果集大小：\n在查询中使用LIMIT语句限制返回结果集的大小，尤其是在涉及大表的查询中，可以避免不必要的性能开销。 使用缓存和CDN：\n对于一些静态数据，可以考虑使用缓存或CDN来减轻数据库的负担，提高访问速度。 综合使用这些索引优化策略，可以有效提高数据库查询性能。优化的具体方法和效果会根据数据库表的结构、数据分布和查询特点而有所不同。\n如何排查MySQL中的慢查询 排查MySQL中的慢SQL通常需要使用一系列工具和方法来定位问题。以下是一些建议和步骤：\n启用慢查询日志：\n在MySQL配置文件中启用慢查询日志，设置合适的long_query_time参数，以定义执行时间超过多少秒的查询被认为是慢查询。慢查询日志记录了执行时间超过设定阈值的SQL语句。 slow_query_log = 1 long_query_time = 1 slow_query_log_file = /path/to/slow-query.log 分析慢查询日志：\n使用工具如mysqldumpslow、pt-query-digest等来分析慢查询日志，识别执行时间较长的SQL语句。 mysqldumpslow /path/to/slow-query.log 使用EXPLAIN分析查询计划：\n使用EXPLAIN语句分析慢查询的查询计划，以了解MySQL是如何执行查询的。这可以帮助识别潜在的性能问题，例如是否使用了索引。 EXPLAIN SELECT * FROM your_table WHERE your_condition; 检查索引：\n确保查询涉及的字段上有合适的索引。使用SHOW INDEX FROM your_table查看表的索引情况，确保索引被正确使用。 SHOW INDEX FROM your_table; 使用MySQL性能工具：\n使用MySQL提供的性能工具，如SHOW PROCESSLIST、SHOW ENGINE INNODB STATUS等，来查看当前运行的SQL语句和系统状态。 SHOW PROCESSLIST; 分析表结构和查询语句：\n审查表结构，确保数据类型、字段长度等设计合理。同时检查查询语句，尽量避免使用SELECT *，只选择需要的字段。 考虑数据库缓存：\nMySQL有一个查询缓存机制，但在某些情况下可能会导致性能问题。通过检查query_cache_size和query_cache_type等相关参数来了解缓存的使用情况。 定期优化表：\n使用OPTIMIZE TABLE语句来优化表，重新组织表的物理存储结构。 OPTIMIZE TABLE your_table; 数据库服务器硬件和资源：\n确保数据库服务器的硬件资源足够，例如内存、磁盘和CPU。监控系统资源使用情况，确保不会出现资源瓶颈。 使用数据库性能分析工具：\n使用第三方性能分析工具，如Percona Toolkit、pt-query-digest等，进行更深入的性能分析和优化。 通过以上步骤，可以逐步定位慢查询的原因，并采取相应的优化策略。\nMySQL索引原理及慢查询优化\n操作系统 Linux常用命令 ls: 列出目录中的文件和子目录。 cd: 切换当前工作目录。 pwd: 显示当前工作目录的路径。 cp: 复制文件或目录。 mv: 移动或重命名文件或目录。 rm: 删除文件或目录。 mkdir: 创建新目录。 rmdir: 删除空目录。 cat: 查看或连接文件。 more/less: 分屏显示文件内容，逐页查看。 head/tail: 显示文件的开头或结尾部分。 touch: 更新文件的访问和修改时间，或者创建新文件。 chmod: 修改文件或目录的权限。 chown: 修改文件或目录的所有者。 ps: 显示当前运行的进程。 kill: 终止进程。 df: 显示磁盘空间使用情况。 du: 显示文件和目录的磁盘使用情况。 top: 实时显示系统资源使用情况。 grep: 在文件中搜索指定模式。 ping: 测试网络连接并测量往返时间。 tar: 打包、压缩和解压文件。 进程和线程有什么区别 进程（Process）和线程（Thread）是操作系统中用于执行程序的两个基本概念，它们有一些重要的区别：\n定义：\n进程： 一个独立的执行环境，包括程序、数据和系统资源。每个进程都有独立的内存空间，进程之间相互独立。 线程： 在进程内部执行的轻量级执行单元。同一进程内的线程共享相同的内存空间和资源，可以更方便地进行通信。 资源占用：\n进程： 占用独立的内存空间和系统资源，相对较重量级。 线程： 共享进程的内存空间，相对轻量级。 通信和同步：\n进程： 进程之间通信需要特殊机制，如管道、消息队列、共享内存等。同步需要使用进程同步机制，如信号量、互斥锁等。 线程： 线程可以通过共享内存直接进行通信，同步相对容易，可以使用线程同步机制，如互斥锁、条件变量等。 切换开销：\n进程： 进程切换开销较大，需要保存和恢复整个进程的上下文。 线程： 线程切换开销较小，因为线程共享相同的地址空间，只需保存和恢复寄存器、程序计数器等少量数据。 独立性：\n进程： 进程是相互独立的执行单元，一个进程的崩溃不会影响其他进程。 线程： 线程共享相同的地址空间，一个线程的错误可能会影响整个进程，但不会影响其他进程。 创建和销毁：\n进程： 创建和销毁进程相对较慢，涉及资源的分配和释放。 线程： 创建和销毁线程相对较快，因为它们共享相同的资源。 适用场景：\n进程： 适用于需要独立执行环境、数据隔离、稳定性较强的应用。 线程： 适用于需要轻量级、资源共享、响应速度快的应用。 Nginx 网络 IP是什么？ IP（Internet Protocol）是计算机网络中的一种协议，用于在互联网上识别和定位设备。IP地址是用来标识网络上的设备的，例如，IPv4地址通常以形如192.168.0.1的格式表示。\n192.168.0.1/16 是什么意思？ 192.168.0.1/16 是一个表示IP地址和子网掩码的标记，用于表示一个IP地址范围。这个标记中的 \u0026ldquo;192.168.0.1\u0026rdquo; 是网络的起始地址，而 \u0026ldquo;/16\u0026rdquo; 表示网络的子网掩码，指定了网络部分有16位，因此IP地址的前16位是网络部分。在IPv4中，一个IP地址总共有32位，因此剩下的 32 - 16 = 16 位用于表示主机。这意味着在这个特定的网络中，可以有2^16个不同的主机地址。\nIPv4 与 IPv6 区别 ipv4和ipv6的区别本质在于它们的二进制表示位数，ipv4是用32位0/1序列来表示的，而ipv6使用128位0/1序列来表示的。 ipv4用32位，为了方便人类记录和阅读，我们通常将ipv4的32位0/1分成4段8位序列，并用10进制来表示每一段(这样，一段的范围就是0到255)，段与段之间以“.”分隔。在IPv6的设计过程中除了一劳永逸地解决了地址短缺问题以外，还考虑了在IPv4中解决不好的其它问题，主要有端到端IP连接、服务质量（QoS）、安全性、多播、移动性、即插即用等。\nDNS 主要作用是什么？ DNS 是域名系统 (Domain Name System) 的缩写，它是由解析器和域名服务器组成的，又名“域名解析服务器”.域名服务器是指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器。其中域名必须对应一个IP地址，而IP地址不一定有域名.在Internet上域名与IP地址之间是一对一（或者多对一）的.\nDNS工作原理 过程：浏览器缓存 -\u0026gt; 系统缓存 -\u0026gt; 路由器缓存 -\u0026gt; IPS服务器缓存 -\u0026gt; 根域名服务器缓存 -\u0026gt; 顶级域名服务器 缓存 -\u0026gt; 主域名服务器缓存。查到后会将结果缓存至本地系统。\nDNS负载均衡策略 原理是在 DNS 服务器中为同一个主机名配置多个 IP 地址，在应答 DNS 查询时，DNS 服务器对每个查询 将以 DNS 文件中主机记录的 IP 地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上 去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。例如可以根据每台机器的负载 量，该机器离用户地理位置的距离等等。\n分布式环境下 Session 如何处理？ 分布式环境下，客户端请求经过负载均衡，可能会分配到不同的服务器上，假如一个用户的请求两次没有落到同一台服务器上，那么在新的服务器上就没有记录用户状态的 Session。\n可以使用 Redis 等分布式缓存来存储 Session，在多台服务器之间共享。\n从浏览器地址栏输入 URL 到显示主页的过程发生了什么？ DNS解析：将域名解析为对应的 IP 地址\n1.1. DNS 查找过程：浏览器缓存、本地DNS路由缓存、DNS解析服务）\n1.2. DNS 解析服务： 1.2.1. 请求根服务器，返回顶级域名服务器\n1.2.2. 请求顶级域名服务器（例如 .com ），返回权威域名服务器\n1.2.3. 请求权威域名服务器（例如 baidu.com ），返回对应的 IP 地址\nTCP连接：与服务器进行三次握手，建立 TCP 连接 向服务器发送 HTTP(S) 请求 服务器处理请求，返回 HTTP(S) 响应 浏览器解析并渲染页面 断开连接：TCP四次挥手，连接结束 TCP 和 UDP 的区别 最根本区别：TCP 是面向连接，而 UDP 是无连接。\nUDP 传输不可靠。 TCP 采用字节流传输；UDP 采用数据段报文 UDP 传输效率比 TCP 快 UDP 所需资源比 TCP 少 TCP 主要应用场景：文件传输、邮件传输；UDP 主要应用场景：即时通讯、域名转换 TCP 首部字节 20-60；UDP 首部 8 字节\n简单总结一下：UDP协议是无连接方式的协议，它的效率高，速度快，占资源少，对服务器的压力比较 小。但是其传输机制为不可靠传送，必须依靠辅助的算法来完成传输控制。 HTTP和HTTPS有什么区别？ HTTP（HyperText Transfer Protocol）和HTTPS（HyperText Transfer Protocol Secure）是用于在客户端和服务器之间传输数据的两种协议，它们之间有一些关键的区别：\n安全性：\nHTTP： 是明文传输的协议，数据在传输过程中是未加密的。这使得HTTP容易受到中间人攻击，例如窃听、篡改或劫持。 HTTPS： 使用了TLS/SSL协议进行数据加密，确保在数据传输的过程中，中间人无法轻易窃听或篡改传输的数据。因此，HTTPS提供了更高的安全性。 端口号：\nHTTP： 默认使用端口号80。 HTTPS： 默认使用端口号443。因为HTTPS引入了加密层，因此需要使用不同的端口号以确保安全通信。 加密方式：\nHTTP： 以明文方式传输数据，不提供加密。 HTTPS： 使用TLS/SSL协议对数据进行加密，确保传输的数据在客户端和服务器之间是安全的。 证书要求：\nHTTP： 不需要证书。 HTTPS： 需要服务器端使用SSL证书，该证书由受信任的证书颁发机构（CA，Certificate Authority）签发。这确保客户端与服务器之间建立的连接是可信任的。 使用场景：\nHTTP： 适用于不涉及敏感信息传输的场景，如浏览网页、阅读新闻等。 HTTPS： 建议用于涉及敏感信息传输的场景，如登录、支付、个人数据提交等，以确保数据的安全性。 性能：\nHTTP： 由于不涉及加密解密过程，通常比HTTPS在性能上更快。 HTTPS： 由于加密解密的过程，可能会引入一些额外的性能开销。然而，现代的硬件和优化手段使得这种差异相对较小。 在今天的互联网环境中，推荐在涉及用户隐私和安全性的场景中使用HTTPS，以确保数据的保密性和完整性。大多数网站已经迁移到了HTTPS，以提供更安全的用户体验。\nGET和POST有什么区别 GET请求和POST请求是HTTP协议中两种常见的请求方法，它们在数据传输、安全性和用途等方面有一些区别：\n数据传输方式：\nGET请求： 将参数附加在URL的末尾，以查询字符串的形式发送给服务器。例如，http://example.com/page?name=value\u0026amp;age=25。 POST请求： 将参数包含在请求的消息体中，而不是直接附加在URL上。数据通过请求头以及请求体传输给服务器。 安全性：\nGET请求： 参数在URL上明文可见，不适合传输敏感信息，因为这些信息会被保存在浏览器的历史记录、服务器日志等地方。 POST请求： 参数在请求体中，相对于GET请求更安全，因为请求体的内容不会被保存在浏览器历史记录中，但仍然可能被记录在服务器日志中。 数据长度限制：\nGET请求： 对数据传输的长度有限制，因为数据附加在URL上，URL的长度受到浏览器和服务器的限制。 POST请求： 通常允许传输更大量的数据，因为数据不附加在URL上，而是放在请求体中。 请求的幂等性：\nGET请求： 通常是幂等的，即对同一个URL的多次请求应该返回相同的结果。 POST请求： 不一定是幂等的，它可能会引起服务器端的状态改变，每次请求的结果可能不同。 缓存：\nGET请求： 可以被浏览器缓存，可以被书签保存，也可以被浏览器历史记录保存。 POST请求： 不会被浏览器缓存，不适合被保存在书签或历史记录中。 使用场景：\nGET请求： 适用于获取数据，如浏览器中的页面跳转、链接、搜索等。 POST请求： 适用于提交表单数据、上传文件等，具有更多的数据传输选项。 总体而言，选择使用GET还是POST取决于具体的需求和用途。GET用于获取数据，而POST用于提交数据。GET请求更适合幂等和无副作用的操作，而POST请求更适合有副作用的操作，例如向服务器提交表单数据。\nHTTP状态码 下面是常见的HTTP状态码：200 - 请求成功;301 - 资源（网页等）被永久转移到其它URL;404 - 请求的资源（网页等）不存在;500 - 内部服务器错误。\n常用端口 FTP (File Transfer Protocol)：\n用途： 用于在客户端和服务器之间传输文件。 端口号： 21 SSH (Secure Shell)：\n用途： 安全外壳协议，用于在网络中加密传输数据。 端口号： 22 HTTP (HyperText Transfer Protocol)：\n用途： 用于在Web浏览器和Web服务器之间传输超文本数据，通常用于访问网页。 端口号： 80 HTTPS (HyperText Transfer Protocol Secure)：\n用途： 加密的HTTP协议，用于在Web浏览器和Web服务器之间安全地传输超文本数据。 端口号： 443 SMTP (Simple Mail Transfer Protocol)：\n用途： 用于发送电子邮件的协议。 端口号： 25 POP3 (Post Office Protocol version 3)：\n用途： 用于接收电子邮件的协议。 端口号： 110 IMAP (Internet Message Access Protocol)：\n用途： 用于接收电子邮件的协议，支持在多个设备上同步邮件状态。 端口号： 143 DNS (Domain Name System)：\n用途： 用于域名解析，将域名映射为对应的IP地址。 端口号： 53 MySQL：\n用途： 用于MySQL数据库的通信。 端口号： 3306 Redis：\n用途： 用于缓存、消息队列等的开源内存数据库。 端口号： 6379（默认端口，可根据配置修改） PHP-FPM：\n用途： PHP FastCGI 进程管理器，用于处理PHP脚本的高性能进程管理。 端口号： 9000（默认端口，可根据配置修改） SSL (Secure Sockets Layer)：\n用途： 用于在网络中提供加密安全通信。 端口号： 443（常用于HTTPS） Cookie和Session的区别 Cookies（Cookie）和Session（会话）是用于在Web应用中跟踪用户状态和维护用户数据的两种主要机制，但它们在实现方式和使用场景上有一些区别：\n1. 存储位置：\nCookie： 存储在客户端（用户浏览器）上，以文本文件的形式保存在用户的计算机上。 Session： 存储在服务器上，通常以服务器上的一个文件或数据库记录的形式保存。 2. 数据安全性：\nCookie： 相对不安全，因为存储在用户的计算机上，用户可以查看和编辑。 Session： 相对安全，因为数据存储在服务器上，用户无法直接访问或修改。 3. 生命周期：\nCookie： 可以设置过期时间，可以是会话级的（浏览器关闭后失效）或长时间的。 Session： 通常在用户关闭浏览器或一定时间不活动后过期，取决于服务器的配置。 4. 存储内容：\nCookie： 存储在客户端的小型文本数据，通常用于跟踪用户偏好、识别用户等。 Session： 存储在服务器上，可用于存储较大的数据，通常包括用户的会话信息、状态等。 5. 跨页面访问：\nCookie： 可以在不同页面之间共享，因为存储在客户端。 Session： 通常通过在页面之间传递会话标识符（session ID）来实现跨页面访问。 6. 资源消耗：\nCookie： 存储在客户端，不占用服务器资源。 Session： 存储在服务器上，可能占用服务器资源，特别是在用户较多的情况下。 7. 使用场景：\nCookie： 适用于存储少量且对安全性要求不高的数据，如用户偏好设置、广告跟踪等。 Session： 适用于存储较大、对安全性要求较高的数据，如用户登录状态、购物车信息等。 总体而言，Cookie和Session是Web开发中常用的两种机制，它们通常一起使用，以实现在Web应用中跟踪用户状态和维护用户数据的目的。选择使用哪种机制取决于应用的具体需求和安全考虑。\nCGI、FastCGI、PHP-FPM 全面了解CGI、FastCGI、PHP-FPM\nPHP-FPM+NGINX通信原理 PHP-FPM+NGINX通信原理\nNoSQL 缓存击穿、缓存穿透、缓存雪崩 Redis 以下是 Redis 支持的主要数据类型以及它们的应用场景和简要说明：\n字符串（String）： 说明： 存储单个值的字符串，是最简单的数据类型。 应用场景： 缓存、计数器、分布式锁等。 哈希表（Hash）： 说明： 键值对的集合，适合存储对象的多个属性。 应用场景： 存储用户信息、对象的属性。 列表（List）： 说明： 有序的字符串元素集合，可在头部或尾部插入或删除元素。 应用场景： 消息队列、最新动态列表。 集合（Set）： 说明： 无序且唯一的字符串元素集合。 应用场景： 存储唯一标签、共同好友、点赞用户。 有序集合（Sorted Set）： 说明： 与集合类似，但每个元素都有一个分数，可以按分数排序。 应用场景： 排行榜、优先级队列。 位图（Bitmap）： 说明： 用于位级别的操作，存储开关状态等。 应用场景： 用户签到、统计在线用户。 HyperLogLog： 说明： 用于基数估算（去重计数）。 应用场景： 统计访问过网站的独立用户数量。 地理空间（Geospatial）： 说明： 存储地理空间信息，支持空间索引。 应用场景： 附近的人、地理位置搜索等。 流（Stream）： 说明： 时间序列数据结构，支持有序、持久化的消息流。 应用场景： 日志记录、事件溯源。 Redis持久化 Redis 持久化是一种将内存中的数据存储到硬盘上以防止数据丢失的机制。在 Redis 中，有两种主要的持久化方式：RDB（Redis Database Backup）和AOF（Append-Only File）。\n1. RDB 持久化： 触发方式： 手动或定期触发。 工作原理： 将当前内存中的数据快照保存到一个二进制文件中。这个文件包含了 Redis 在某个时间点的数据。 优点： 适合用于备份和恢复，文件较小，恢复速度较快。 缺点： 可能会有一定的数据丢失，因为 RDB 是定期执行的。 配置示例： save 900 1 # 在 900 秒内，如果至少有 1 个 key 发生变化，则执行一次快照 save 300 10 # 在 300 秒内，如果至少有 10 个 key 发生变化，则执行一次快照 save 60 10000 # 在 60 秒内，如果至少有 10000 个 key 发生变化，则执行一次快照 2. AOF 持久化： 触发方式： 始终处于开启状态，数据发生变化时即时记录。 工作原理： 记录每个写命令（写操作）到一个文件中，以追加的方式记录，该文件可以用于恢复数据。 优点： 提供更好的持久性，可以降低数据丢失的可能性。 缺点： 文件较大，恢复速度可能较慢。 配置示例： appendonly yes # 开启 AOF 持久化 appendfsync everysec # 每秒钟同步一次 AOF 文件，可以选择 always 或 no。 持久化选择和使用场景： 选择 RDB 持久化：\n适用于对数据一定程度的数据丢失可以接受的场景。 适合用于备份和恢复。 选择 AOF 持久化：\n需要更高的数据安全性，对数据的可靠性要求较高的场景。 对于需要追踪数据变更历史的场景。 注意： 也可以同时使用 RDB 和 AOF 持久化，以兼顾备份和数据恢复的需求。 持久化的方式可以根据具体的业务需求和对数据安全性的要求进行调整。 RDB 和 AOF恢复优先级对比 AOF 恢复优先于 RDB：\n如果同时启用了 AOF（Append-Only File）和 RDB（Redis Database Backup）持久化，Redis 在启动时会优先使用 AOF 文件进行数据恢复。AOF 文件包含了每个写命令的记录，能够提供更高的数据安全性。 AOF 文件的同步方式影响恢复优先级：\n如果 AOF 文件的同步方式为 always（始终同步），则 Redis 在启动时会强制将 AOF 文件中的数据同步到内存中，确保数据的完整性。这时，即使存在 RDB 快照，AOF 仍然优先。 如果 AOF 文件的同步方式为 everysec（每秒同步），则 Redis 在启动时会尽量使用 AOF 文件进行恢复，但可能会根据同步的时间点有一定的数据丢失。此时，如果存在 RDB 文件，则会考虑使用 RDB 进行恢复。 RDB 文件作为备用：\nRDB 文件通常用于备份和恢复，可以在需要时手动加载或用于定期备份。当 AOF 文件无法使用或需要降低数据恢复时间时，RDB 可作为一个备用的、更快速的恢复方式。 启用 AOF 时的 RDB 文件恢复：\n如果 AOF 文件存在但损坏，Redis 在启动时会检查是否存在有效的 RDB 文件。如果 RDB 文件存在且有效，可以用于恢复数据。 总体而言，AOF 文件提供了更强的数据安全性，但在某些情况下可能导致恢复时间较长。RDB 文件则提供了较快的恢复速度，但在保存快照的过程中可能存在一定的数据丢失。根据业务需求和对数据安全性的要求，可以选择合适的持久化配置。\nRedis、Memcache 和、MongoDB 的区别 Redis:\n类型： Redis 是一个基于内存的键值存储系统，属于 NoSQL 数据库。 数据模型： Redis支持丰富的数据结构，如字符串、哈希表、列表、集合等。 用途： 主要用于缓存、会话存储、消息队列等，也可用作持久化存储。 特点： 非常快速，支持持久化，具有丰富的数据类型和强大的原子操作。 Memcache:\n类型： Memcache 也是一个基于内存的键值存储系统，属于分布式缓存系统。 数据模型： Memcache 是一个简单的键值对存储系统，只支持字符串作为值。 用途： 用于缓存，提高 Web 应用的性能。 特点： 简单、快速，主要用于缓存，但不支持持久化和复杂的数据结构。 MongoDB:\n类型： MongoDB 是一个面向文档的 NoSQL 数据库。 数据模型： MongoDB 存储数据的基本单元是文档，这是一种类似于 JSON 格式的数据结构。 用途： 适用于需要存储和查询复杂文档结构的应用，例如大数据和实时应用。 特点： 支持复杂的查询和索引，适用于大规模的数据存储和实时分析。 主要区别：\n数据模型： Redis 和 Memcache 是键值存储系统，存储简单的键值对，而 MongoDB 是文档存储系统，存储复杂的文档结构。 数据类型： Redis 支持丰富的数据类型，包括字符串、哈希表、列表、集合等，而 Memcache 只支持字符串。MongoDB 存储的是文档，具有更灵活的数据模型。 用途： Redis 和 Memcache 主要用于缓存，提高读取性能。MongoDB 适用于需要存储和查询复杂文档结构的应用。 持久化： Redis 支持持久化，可以将数据保存到磁盘。Memcache 不支持持久化。MongoDB 也支持持久化，并提供复制和分片机制。 设计模式 工厂模式 在工作中，我们经常会遇到复杂的对象实例化过程，这时候可以使用工厂模式来实现。 例如在一个订单系统中，需要根据不同的订单信息生成不同的订单对象，此时可以使用工厂模式来 实例化相应的对象。\n单例模式 在工作中也会遇到需要使用到共享数据或者共享资源的情况，此时可以采用单例模式来 保证整个应用中只有一个实例存在。\n模板方法模 在工作中，我们经常会遇到需要重复执行一些步骤的情况，但是这些步骤之间可能 会有一些变化。此时可以使用模板方法模式来实现。例如在一个订单处理流程中，需要重复执行根 据不同订单信息生成不同的订单对象、根据不同的售后信息生成不同的售后对象、根据不同的物流 信息生成不同的物流对象等步骤。\n策略模式 在工作中，我们经常会遇到需要根据不同的情况采取不同的处理方法的情况，此时可以 使用策略模式来实现。例如在一个购物系统中，需要根据不同的用户身份采取不同的优惠方式（例 如新用户优惠、老用户优惠、VIP 会员优惠等）。此时就可以使用策略模式来实现这些功能。\n适配器模式 在工作中，我们经常会遇到需要将一个接口转换成另一个接口的情况，此时就可以使 用适配器模式来实现。例如在一个数据库访问系统中，不同的数据库有不同的访问方式（例如 MySQL、Oracle、MongoDB 等）。此时就可以使用适配器来将这些不同的访问方式适配到相同的 API 接口上。\n代理模式 在工作中，我们经常会遇到需要对一个对象进行控制访问的情况，此时可以使用代理模 式来实现。例如在一个文件上传系统中，需要对用户上传的文件进行安全性校验（例如文件格式、 大小、是否有效等）。此时就可以使用代理模式来将安全性校验逻辑和文件上传逻辑分隔开。\n装饰者模式 在工作中，我们经常会遇到需要对一个对象进行功能增强的情况，此时可以使用装饰 者模式来实现。例如在一个电商系统中，可以使用装饰者模式来将不同的促销方法装饰到商品上 （例如打折、买赠、免运费等）。\n外观模式 在工作中，我们经常会遇到需要对一系列复杂的子系统进行封装的情况，此时可以使用 外观模式来实现。例如在一个订单处理流程中，可以将根据不同的订单信息生成不同的订单对象、 根据不同的售后信息生成不同的售后对象、根据不同的物流信息生成不同的物流对象这些功能封装 到一个外部服务中。\n其他 Elasticsearch Elasticsearch（ES）是一个开源的分布式搜索引擎，基于Apache Lucene构建。它提供了一个强大且灵活的全文搜索和分析引擎，广泛应用于构建实时搜索、日志分析、数据可视化等场景。\n特点：\n分布式架构： Elasticsearch是一个分布式系统，可以通过集群中的多个节点来处理大规模数据。这使得它具有横向扩展的能力，可以处理大量的数据和请求。\n文档存储： 数据以文档的形式存储，通常使用JSON格式。每个文档都有一个唯一的ID，并且属于一个类型。多个文档组合在一起形成一个索引。\n索引： 索引是具有相似结构的文档的集合。它们被用来进行搜索、过滤和排序。每个索引都有一个唯一的名称。\n全文搜索： Elasticsearch 提供了强大的全文搜索功能，支持复杂的查询，包括通配符搜索、模糊搜索、短语匹配等。\n实时性： Elasticsearch提供实时搜索，意味着一旦文档被索引，就可以立即进行搜索，而不需要等待。\n多语言支持： 支持多种编程语言，包括Java、Python、JavaScript等，通过RESTful API进行交互。\n聚合和分析： Elasticsearch不仅用于搜索，还支持对数据进行聚合、分析和统计。它提供了强大的聚合框架，允许用户按照各种条件对数据进行分析。\n开放源代码： Elasticsearch是开源的，可以根据需求进行定制和扩展。它的灵活性和强大的社区支持使其成为许多应用和系统中的首选搜索引擎。\n插件生态系统： Elasticsearch拥有丰富的插件生态系统，可以用于增强其功能，包括安全插件、监控插件、可视化工具等。\nElasticsearch通常与Logstash和Kibana一同使用，构成所谓的ELK（Elasticsearch, Logstash, Kibana）堆栈，用于日志分析和实时数据可视化。这个堆栈使得用户可以方便地收集、处理、分析和可视化数据。\n缺点：\n学习曲线： 对于初学者来说，Elasticsearch有一定的学习曲线，尤其是在配置和优化方面。\n资源消耗： Elasticsearch在处理大量数据时可能需要较多的硬件资源，包括内存和存储。\n复杂性： 对于一些简单的使用场景，Elasticsearch的强大功能可能显得过于复杂。\n实时性限制： 尽管Elasticsearch提供了近实时的索引和搜索，但对于对实时性要求极高的场景，可能仍有局限性。\n数据一致性： 在分布式环境中，数据一致性可能面临一些挑战，需要通过配置和调优来处理。\n存储成本： 由于Elasticsearch需要保存原始数据和索引数据，存储成本可能相对较高。\n虽然Elasticsearch有一些缺点，但在大多数场景下，其优点远远超过了缺点，特别是对于需要强大搜索和分析能力的应用。选择是否使用Elasticsearch通常取决于具体的应用需求和技术架构。\n防SQL注入 1.对用户的输入进行校验，可以通过正则表达式，函数等。tp框架中的config.php文件可配置全局过滤规则。 'default_filter' =\u0026gt; 'htmlspecialchars,addslashes,strip_tags'\nhtmlspecialchars：防XSS攻击，把预定义的字符 \u0026ldquo;\u0026lt;\u0026rdquo; （小于）和 \u0026ldquo;\u0026gt;\u0026rdquo; （大于）转换为 HTML 实体。 htmlspecialchars_ decode() 函数把一些预定义的 HTML 实体转换为字符。 tip：Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。为了和 CSS 区分，这里把攻击的第一个字母改成了 X，于是叫做 XSS。XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。\naddslashes：防SQL注入。addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。预定义字符是： 单引号（\u0026rsquo;）双引号（\u0026quot;）反斜杠（\\）NULL。stripslashes()：删除由 addslashes() 函数添加的反斜杠。\nstrip_tags：剥去字符串中的 HTML 标签。\n2.可以使用预处理语句l或者直接使用存储过程进行数据查询存取。\n3.不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n4.不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。\n5.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装。\n预防CSRF攻击 验证HTTP Referer字段。\n请求中添加token并验证。\nTIP:CSRF（Cross-Site Request Forgery）的全称是“跨站请求伪造”，也被称为“One Click Attack”或者“Session Riding”，通常缩写为CSRF或者XSRF。CSRF的中文名称尽管听起来像跨站脚本攻击（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来攻击受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。\nCSRF和XSS的区别：XSS更偏向于方法论，CSRF更偏向于一种形式，只要是伪造用户发起的请求，都可成为CSRF攻击。 \u0026hellip; XSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。\n高并发处理 1.资源。能静态实现的就静态实现，静态资源也要尽量使用分布式存储，例如七牛云等云存储。 2.效率。PHP代码里，尽量注意内存的使用，单个脚本的运行效率要Ok. 3.缓存。使用memcache来实现非持久存储，使用no-sql来实现持久存储。 4.server。使用nginx+fpm或者nginx+apache，来实现动静态分离访问。 5.mysql。作为最终的存储库以及一些不可避免的实时调用库，做主从处理，Master+多Slave，多个只读副本来实现实时的调用库。 6.负载。建议架设一层负载均衡，来实现web server的轮询。例如云平台中的LBS\n跨域 跨域处理\n时间复杂度和空间复杂度 时间复杂度*******\n","date":"2024-02-07T21:09:40+08:00","permalink":"https://WangDouble-Dev.github.io/post/phper/","section":"post","tags":["PHP","面试"],"title":"PHP面试准备"},{"categories":["Github"],"contents":"Github GraphQL API是Github提供的一种API接口。它可以让你更方便的获取Github上的数据。 请求该API最直观最简单的方式就是使用Github GraphQL API资源管理器。\n比如，假如你想知道你的仓库ID和Discussions分类ID。就可以使用Github GraphQL API查询。\n假设你的仓库url地址是https://github.com/owner/repo_name 在Github GraphQL API资源管理器中输入如下查询语句。\n{ repository(owner: \u0026#34;owner\u0026#34;, name: \u0026#34;repo_name\u0026#34;) { id name discussionCategories(first:1) { nodes{ id name } pageInfo{ hasNextPage hasPreviousPage } totalCount } } } 就会得到如下结果。\n{ \u0026#34;data\u0026#34;: { \u0026#34;repository\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;R_key\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;repo_name\u0026#34;, \u0026#34;discussionCategories\u0026#34;: { \u0026#34;nodes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;DIC_key\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Announcements\u0026#34; } ], \u0026#34;pageInfo\u0026#34;: { \u0026#34;hasNextPage\u0026#34;: true, \u0026#34;hasPreviousPage\u0026#34;: false }, \u0026#34;totalCount\u0026#34;: 6 } } } } 更多其他信息查询及资源管理器的使用可参考官方文档。\n番外 GraphQL是一种用于API的查询语言，它提供了一种更高效、强大和灵活的替代方案，相比于传统的RESTful架构。 GraphQL不仅允许客户端精确地指定它们需要的数据，还使得客户端能够聚合多个API调用到一个单一的GraphQL请求。\nGraphQL官网\nGraphQL中文网\n","date":"2023-12-24T15:00:53+08:00","permalink":"https://WangDouble-Dev.github.io/post/github_explorer/","section":"post","tags":["Github"],"title":"Github GraphQL API"},{"categories":["Github"],"contents":"Github配置 登录github网站，找到自己要集成giscus的仓库。点击Settings，找到Discussions 。勾选复选框。\n具体操作可参考官方文档。\nGiscus配置 打开giscus网站。在仓库输入框中，输入指定仓库的url地址，如下图。\n如果Github仓库已配置好，会提示该仓库满足所有条件。往下滚动,找到启用 giscus，会自动生成script代码。\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;owner/repo_name\u0026#34; data-repo-id=\u0026#34;R_key\u0026#34; data-category=\u0026#34;category_name\u0026#34; data-category-id=\u0026#34;DIC_key\u0026#34; data-mapping=\u0026#34;og:title\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 将script添加到你的网站中即可。\n番外 一开始没发现giscus网站会自动帮忙生成好script代码，所以repo-id和category-id是用 Github Explorer手动查询的。具体可看隔壁。\n","date":"2023-12-24T14:30:08+08:00","permalink":"https://WangDouble-Dev.github.io/post/giscus/","section":"post","tags":["Github"],"title":"Github Pages 评论系统 Giscus"},{"categories":null,"contents":" 集成Giscus 改进前后端分离PHP项目线上部署记录的Nginx配置文件。 使用Let\u0026rsquo;s Encrypt安装一次SSL证书。 使用CentOS下使用Docker搭建LNMP开发环境自己写一次Dockerfile。可参考Dockerfile reference。 ","date":"2023-12-24T13:50:28+08:00","permalink":"https://WangDouble-Dev.github.io/todo/","section":"","tags":null,"title":"Todo"},{"categories":["Nginx"],"contents":" 前提是已具备基本LNMP环境。以后端的视角记录。主要是Nginx配置。\n背景 项目所在目录：/var/www/html/project_name/\n前端项目所在目录：/var/www/html/project_name/web/\n后端项目所在目录：/var/www/html/project_name/api/\n前端部署 在/var/www/html/project_name/web/下解压缩前端提供的压缩包。\n配置nginx server { listen 80; server_name domain.com www.domain.com; return 301 https://www.domain.com$request_uri; } server { listen 443 ssl http2; #【1】 server_name www.domain.com domain.com; # 域名设置 access_log /var/log/nginx/www.domain.com-access.log; error_log /var/log/nginx/www.domain.com-error.log; index index.html index.htm; # 日志目录 ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; client_max_body_size 5m; root /var/www/html/project_name/web; index index.html index.htm; location / { try_files $uri $uri/ /index.html;#【2】 } location ^~ /api/ {#【3】 add_header access-control-allow-origin *; proxy_pass http://127.0.0.1:8082;#将api路径下的请求转发到后端 proxy_connect_timeout 1800; proxy_read_timeout 1800; proxy_send_timeout 1800; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Origin $host:$server_port; proxy_set_header Referer $host:$server_port; proxy_set_header Accept-Encoding \u0026#34;\u0026#34;; # 去除/api/前缀 rewrite ^/api/(.*)$ /$1 break; } } 注释【1】：让Nginx在443端口上监听HTTPS请求，并使用SSL/TLS协议加密通信内容，同时使用HTTP/2协议。 注释【2】：首先，Nginx会尝试将请求的URI作为文件路径，如果这个文件存在，就直接返回这个文件的内容。\n如果文件不存在，Nginx会尝试将请求的URI作为目录路径，如果这个目录存在，就返回这个目录的默认页面。\n如果文件和目录都不存在，Nginx会返回/index.html这个文件的内容。 注释【3】：^~是一个匹配修饰符，表示如果这个location的前缀匹配到请求，那么就立即停止搜索其他location，处理这个请求。\n/api/是location的匹配规则，表示所有以/api/开头的请求都会被这个location处理。\n在这个location块中，所有以/api/开头的请求都会被反向代理到http://127.0.0.1:8888，并且/api/前缀会被去除。这是通过proxy_pass和rewrite两个指令实现的。 后端部署 在/var/www/html/project_name/api/下上传代码。\n配置nginx 这个后端的Nginx配置写得不好。server里实际可以不需要指定二级域名（api.domain.com)，只需要指定端口就可以了。这个二级域名在项目实际运行当中，并没有直接使用。 后端的接口调用都是通过前端的Nginx转发的。这个域名没用但解析了，不大安全。改进方法待定。\nserver { listen 80; server_name api.domain.com; return 301 https://$host$request_uri; } server { listen 443 ssl http2; server_name api.domain.com; # Certificates ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; access_log /var/log/nginx/api.domain.com-access.log; error_log /var/log/nginx/api.domain.com-error.log; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host; proxy_pass http://localhost:8082; } } server { listen 8082; server_name api.domain.com; root /var/www/html/project_name/api/public; charset utf-8; autoindex off; location / { add_header Access-Control-Allow-Origin \u0026#39;*\u0026#39;; add_header Access-Control-Allow-Methods \u0026#39;GET, POST, OPTIONS, PUT, DELETE\u0026#39;; add_header Access-Control-Allow-Headers \u0026#39;x-token,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Authorization\u0026#39;; if ($request_method = \u0026#39;OPTIONS\u0026#39;) { return 204; } proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-PORT $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; location / { # !-e 判断的是目录或文件是否不存在，不存在时则重写 # !-f 判断的是文件是否不存在，不存在时则重写 if (!-f $request_filename) { # 路由重写 - 一律重写至 index.php 下，由项目代码进行路由定义 rewrite ^/(.*)$ /index.php?s=$1 last; break; } } location ~ \\.php$ { include fastcgi_params; include fastcgi.conf; fastcgi_pass fastcgi_backend; fastcgi_intercept_errors on; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name; } } } 遇到的问题 如何将文件上传到服务器 我文件上传一般习惯用xftp,但是project_name目录下的文件夹权限是www-data，而我当前的登录用户名是ubuntu。所以我用xftp上传文件时会报错。\n解决方法：切换到www-data用户，给自己添加认证信息，然后再用xftp上传文件。\nsudo su www-data vim ~/.ssh/authorized_keys 将自己的公钥添加到authorized_keys文件中。\nPS: 如果登录方式不是SSH可以略过。\n需要一个SSL证书 解决方法：使用Let\u0026rsquo;s Encrypt免费SSL证书。\n","date":"2023-12-23T18:05:16+08:00","permalink":"https://WangDouble-Dev.github.io/post/online_deployment/","section":"post","tags":null,"title":"前后端分离PHP项目线上部署记录"},{"categories":["Docker"],"contents":"运行环境 操作系统：CentOS Linux 8 Docker：Docker Engine - Community 24.0.7 参考网站 Docker如何打包软件 PHP镜像 MySQL镜像 Nginx镜像 Dockerfile reference 具体操作 方案1：使用现成的Docker Compose文件 拉取指定分支（lnump）的文件。\ngit clone -b lnmp https://github.com/WangDouble-Dev/docker.git 进入docker-compose.yml所在目录，执行docker-compose up -d命令。-d参数表示后台运行。\n验证 浏览器访问 http://localhost:8080 ,显示nginx 403 Forbidden。说明nginx已经启动。 浏览器访问 http://localhost:8080/test.php ,显示phpinfo信息。说明php已经启动。 命令行执行docker exec -it \u0026lt;container_name_or_id\u0026gt; mysql -uroot -p123456,\u0026lt;container_name_or_id\u0026gt;是你的Docker MySql服务的容器ID。 能够正常连接，说明mysql已经启动。 docker-compose.yml 字段说明 字段 说明 ports 端口映射，本机端口：docker端口。只能改本机。 volumes 文件夹映射，本机目录：docker目录。只能改本机 MYSQL_ROOT_PASSWORD mysql root用户默认密码 注意事项 由于代码跑在docker里，所以 localhost 和 127.0.0.1不再可用。如需要连接mysql，应使用如下地址：\nmysql-server 方案2：自己编写Dockerfile和docker-compose.yml文件 以后再写\n","date":"2023-12-10T20:51:53+08:00","permalink":"https://WangDouble-Dev.github.io/post/docker_php_env/","section":"post","tags":["Docker","CentOS","PHP"],"title":"CentOS下使用Docker搭建LNMP开发环境"},{"categories":["Docker"],"contents":" 仅记录自己学习Docker的过程。安装的是Docker Engine不是Desktop。\n运行环境 操作系统：CentOS Linux 8 参考网站 官方CentOS下载Docker Engine指引 执行步骤 配置repository 用于安装和更新Docker。\nsudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 安装Docker Engine sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 启动Docker sudo systemctl start docker 可用sudo systemctl status docker查看Docker状态。\n测试Docker sudo docker run hello-world 当你执行 sudo docker run hello-world 命令时，Docker 会做以下几件事：\nDocker 会在本地查找名为 \u0026ldquo;hello-world\u0026rdquo; 的镜像。 如果在本地没有找到，Docker 会去 Docker Hub（默认的 Docker 镜像仓库）下载 \u0026ldquo;hello-world\u0026rdquo; 镜像。 Docker 会创建一个新的容器，并在这个容器中运行 \u0026ldquo;hello-world\u0026rdquo; 镜像。 \u0026ldquo;hello-world\u0026rdquo; 镜像在下载后存储在 Docker 的镜像库中。你可以通过 docker images 命令查看所有的 Docker 镜像。\n\u0026ldquo;hello-world\u0026rdquo; 容器在运行后会存在于 Docker 的容器列表中，即使它已经停止运行。你可以通过 docker ps -a 命令查看所有的 Docker 容器，包括已经停止运行的。\n所以，\u0026ldquo;hello-world\u0026rdquo; 镜像存储在 Docker 的镜像库中，而 \u0026ldquo;hello-world\u0026rdquo; 容器存储在 Docker 的容器列表中。\n删除指定镜像和容器 如果你想删除本地的 \u0026ldquo;hello-world\u0026rdquo; 镜像和容器，你可以按照以下步骤操作：\n首先，你需要找到 \u0026ldquo;hello-world\u0026rdquo; 容器的 ID。你可以通过运行 docker ps -a 命令来查看所有的 Docker 容器，包括已经停止运行的。找到 \u0026ldquo;hello-world\u0026rdquo; 容器的 ID 后，你可以使用 docker rm 命令来删除它。\n然后，你需要找到 \u0026ldquo;hello-world\u0026rdquo; 镜像的 ID。你可以通过运行 docker images 命令来查看所有的 Docker 镜像。找到 \u0026ldquo;hello-world\u0026rdquo; 镜像的 ID 后，你可以使用 docker rmi 命令来删除它。\n删除指定镜像 sudo docker rmi [image id] 删除指定容器 sudo docker rm [container id] 卸载 卸载Docker sudo yum remove docker-ce docker-ce-cli containerd.io 删除所有镜像、容器、卷和自定义配置 sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd ","date":"2023-12-10T13:42:49+08:00","permalink":"https://WangDouble-Dev.github.io/post/docker_install/","section":"post","tags":["Docker","CentOS"],"title":"CentOS下安装Docker"},{"categories":null,"contents":" 温柔可爱美丽善良落落大方，善解人意，爱心十足，爱自己爱家人，人群中最靓的那个，beautiful ！！ —— 任先生\n","date":"2023-12-09T21:18:39+08:00","permalink":"https://WangDouble-Dev.github.io/about/","section":"","tags":null,"title":"About Me"},{"categories":["其它"],"contents":"主要步骤 1. 在电脑上安装Http Toolkit Http Toolkit Windows端下载地址\n2. 在电脑上安装夜神模拟器 夜神模拟器下载地址\n3. 下载Http Toolkit Android端 可以在谷歌应用商店下载。不支持谷歌应用商店的手机可以在APKPure下载。\n4. 在夜神模拟器中安装Http Toolkit Android端 将下载好的apk文件拖入夜神模拟器中即可。\n5. 开始抓包 在电脑上打开Http Toolkit，选择Android Device via ADB。 然后切换到夜神模拟器中，打开Http Toolkit，会提示是否信任证书，直接点击确定。就能获取到抓包数据了。 常见问题 1. 为什么不用Http Toolkit的Android Device via QR Code？使用起来更便捷，也不用安装夜神模拟器。 因为现在手机的安卓版本普遍较高。在Android 7.0及以上的系统中，就算你安装了Http Toolkit的证书，手机内的应用也不会信任它。而使用Android Device via ADB能避免这个问题。详情请看这里。\n2. 一定要用夜神模拟器吗？其他安卓模拟器不行吗？ 也可以。只要打开你的安卓模拟器之后，Android Device via ADB图标正常显示就可以使用。\n图标这样是不能使用的。\n注意事项 要模拟器开着的情况下，Http Toolkit的Android Device via ADB图标才会正常显示。 要使用Android Device via ADB，设备是需要Root过的。所以最好选择的安卓模拟器是支持Root设置或支持ADB的。这也是我选择夜神模拟器的原因。 其他注意事项请看这里。 ","date":"2023-10-21T23:03:03+08:00","permalink":"https://WangDouble-Dev.github.io/post/http_toolkit_android/","section":"post","tags":["Http Toolkit","Android"],"title":"使用Http Toolkit Android抓包的简易方法"},{"categories":["Guide"],"contents":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don’t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren’t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo’s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015.\n","date":"2023-02-16T18:58:11+08:00","permalink":"https://WangDouble-Dev.github.io/post/markdown_syntax_guide/","section":"post","tags":null,"title":"Markdown Syntax Guide"}]