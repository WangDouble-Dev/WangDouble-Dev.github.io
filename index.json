[{"categories":["其它"],"contents":"产品 Ant Design\n网站建设 Hugo\n","date":"2025-03-14T17:07:01+08:00","permalink":"https://WangDouble-Dev.github.io/post/resource/","section":"post","tags":null,"title":"资源"},{"categories":["其它"],"contents":" 想要在Windows电脑上实现像MacBook一样，空格预览大多数文件的功能，所以在微软应用商店上下载了QuickLook。在评论中看到可在系统托盘（通知区域） 中隐藏QuickLook图标，故记录一下。\n在C:Users\\用户名\\AppData\\Roaming\\pooi.moe\\QuickLook找到QuickLook.config。\n记事本打开配置文件并在\u0026lt;Settings\u0026gt;\u0026lt;/Settings\u0026gt;里添加\u0026lt;ShowTrayIcon\u0026gt;False\u0026lt;/ShowTrayIcon\u0026gt;后保存，再重启软件右下角终于没有图标了。\n恢复可删除添加内容或值False改为True。\n有部分人的目录可能是C:\\Users\\用户名\\AppData\\Local\\Packages\\21090PaddyXu.QuickLook_egxr34yet59cg\\LocalCache\\Roaming\\pooi.moe\\QuickLook。\n改完后的QuickLook.config文件如下\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Settings\u0026gt; \u0026lt;LastUpdateTicks\u0026gt;638584839751137378\u0026lt;/LastUpdateTicks\u0026gt; \u0026lt;ShowTrayIcon\u0026gt;False\u0026lt;/ShowTrayIcon\u0026gt; \u0026lt;/Settings\u0026gt; 补充说明\n在 Windows 系统中，系统托盘（通知区域）位于任务栏的右侧，包含了各种系统和应用程序的图标，这些图标可以提供通知、快速访问应用程序的设置或其他功能。 \u0026lt;ShowTrayIcon\u0026gt;False\u0026lt;/ShowTrayIcon\u0026gt; 在 Windows 系统中的作用通常如下：\n隐藏托盘图标：如果某个应用程序的配置文件包含 \u0026lt;ShowTrayIcon\u0026gt;False\u0026lt;/ShowTrayIcon\u0026gt;，那么当该应用程序运行时，它不会在系统托盘中显示其图标。这意味着用户将无法通过系统托盘直接访问该应用程序的快捷功能或查看其状态。\n减少托盘图标数量：某些用户或系统管理员可能希望减少系统托盘中的图标数量，以保持任务栏的简洁和清晰。因此，可以通过设置 \u0026lt;ShowTrayIcon\u0026gt;False\u0026lt;/ShowTrayIcon\u0026gt; 来实现这一目的。\n配置文件：这一设置通常出现在应用程序的配置文件（如 .xml、.config 或 .ini 文件）中。开发人员或高级用户可以手动编辑这些文件，以控制应用程序的行为。\n","date":"2024-08-05T20:51:39+08:00","permalink":"https://WangDouble-Dev.github.io/post/quick_look/","section":"post","tags":["QuickLook","Windows"],"title":"Windows系统下隐藏QuickLook在系统托盘中的图标"},{"categories":["其它"],"contents":" 某天用PHPStorm写代码的时候，代码突然不提示了,不会自动补全及导入类了。代码编写速度直线下降。\n检查了很多设置，最后发现是IDE的Power Save Mode模式开启了。\n通常，IDE（集成开发环境）的省电模式是为了在使用电池供电时减少系统资源的使用，以延长电池寿命。省电模式通常涉及一系列设置和调整，以降低软件的性能需求，从而减少能耗。这些调整可能包括：\n自动保存设置： 将自动保存的频率调整为更长的时间间隔，以减少IO操作。\n自动代码分析： 降低代码分析的频率或关闭一些耗费资源的代码检查功能。\n自动代码补全： 可能会降低或禁用自动代码补全功能，因为它通常需要消耗一定的计算资源。\n实时语法检查： 减少或关闭实时语法检查，以降低对系统资源的占用。\n背景任务： 延迟或限制一些后台任务的执行，以减少对CPU和内存的需求。\n界面动画和效果： 禁用一些界面动画和特效，以减少对图形处理单元（GPU）的负担。\n插件管理： 停用不必要的插件，因为一些插件可能在后台执行任务，增加了系统负担。\n缓存策略： 调整缓存策略，减少缓存刷新的频率。\n关闭省电模式方法：\n通过点击IDE的右下角的电源图标，关闭Power Save Mode模式。 也可以通过File -\u0026gt; Power Save Mode菜单项来切换Power Save Mode模式。 参考文档：\nPHPStorm禁用自动突出显示用法 ","date":"2024-02-25T13:24:05+08:00","permalink":"https://WangDouble-Dev.github.io/post/ide_power_save_mode/","section":"post","tags":["IDE","PHPStorm","Power Save Mode"],"title":"IDE|PHPStorm Power Save Mode模式开启导致代码不提示及自动补全失效"},{"categories":["Github"],"contents":"Github GraphQL API是Github提供的一种API接口。它可以让你更方便的获取Github上的数据。 请求该API最直观最简单的方式就是使用Github GraphQL API资源管理器。\n比如，假如你想知道你的仓库ID和Discussions分类ID。就可以使用Github GraphQL API查询。\n假设你的仓库url地址是https://github.com/owner/repo_name 在Github GraphQL API资源管理器中输入如下查询语句。\n{ repository(owner: \u0026#34;owner\u0026#34;, name: \u0026#34;repo_name\u0026#34;) { id name discussionCategories(first:1) { nodes{ id name } pageInfo{ hasNextPage hasPreviousPage } totalCount } } } 就会得到如下结果。\n{ \u0026#34;data\u0026#34;: { \u0026#34;repository\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;R_key\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;repo_name\u0026#34;, \u0026#34;discussionCategories\u0026#34;: { \u0026#34;nodes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;DIC_key\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Announcements\u0026#34; } ], \u0026#34;pageInfo\u0026#34;: { \u0026#34;hasNextPage\u0026#34;: true, \u0026#34;hasPreviousPage\u0026#34;: false }, \u0026#34;totalCount\u0026#34;: 6 } } } } 更多其他信息查询及资源管理器的使用可参考官方文档。\n番外 GraphQL是一种用于API的查询语言，它提供了一种更高效、强大和灵活的替代方案，相比于传统的RESTful架构。 GraphQL不仅允许客户端精确地指定它们需要的数据，还使得客户端能够聚合多个API调用到一个单一的GraphQL请求。\nGraphQL官网\nGraphQL中文网\n","date":"2023-12-24T15:00:53+08:00","permalink":"https://WangDouble-Dev.github.io/post/github_explorer/","section":"post","tags":["Github"],"title":"Github GraphQL API"},{"categories":["Github"],"contents":"Github配置 登录github网站，找到自己要集成giscus的仓库。点击Settings，找到Discussions 。勾选复选框。\n具体操作可参考官方文档。\nGiscus配置 打开giscus网站。在仓库输入框中，输入指定仓库的url地址，如下图。\n如果Github仓库已配置好，会提示该仓库满足所有条件。往下滚动,找到启用 giscus，会自动生成script代码。\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;owner/repo_name\u0026#34; data-repo-id=\u0026#34;R_key\u0026#34; data-category=\u0026#34;category_name\u0026#34; data-category-id=\u0026#34;DIC_key\u0026#34; data-mapping=\u0026#34;og:title\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 将script添加到你的网站中即可。\n番外 一开始没发现giscus网站会自动帮忙生成好script代码，所以repo-id和category-id是用 Github Explorer手动查询的。具体可看隔壁。\n","date":"2023-12-24T14:30:08+08:00","permalink":"https://WangDouble-Dev.github.io/post/giscus/","section":"post","tags":["Github"],"title":"Github Pages 评论系统 Giscus"},{"categories":null,"contents":" 集成Giscus 改进前后端分离PHP项目线上部署记录的Nginx配置文件。 使用Let\u0026rsquo;s Encrypt安装一次SSL证书。 使用CentOS下使用Docker搭建LNMP开发环境自己写一次Dockerfile。可参考Dockerfile reference。 ","date":"2023-12-24T13:50:28+08:00","permalink":"https://WangDouble-Dev.github.io/todo/","section":"","tags":null,"title":"Todo"},{"categories":["Nginx"],"contents":" 前提是已具备基本LNMP环境。以后端的视角记录。主要是Nginx配置。\n背景 项目所在目录：/var/www/html/project_name/\n前端项目所在目录：/var/www/html/project_name/web/\n后端项目所在目录：/var/www/html/project_name/api/\n前端部署 在/var/www/html/project_name/web/下解压缩前端提供的压缩包。\n配置nginx server { listen 80; server_name domain.com www.domain.com; return 301 https://www.domain.com$request_uri; } server { listen 443 ssl http2; #【1】 server_name www.domain.com domain.com; # 域名设置 access_log /var/log/nginx/www.domain.com-access.log; error_log /var/log/nginx/www.domain.com-error.log; index index.html index.htm; # 日志目录 ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; client_max_body_size 5m; root /var/www/html/project_name/web; index index.html index.htm; location / { try_files $uri $uri/ /index.html;#【2】 } location ^~ /api/ {#【3】 add_header access-control-allow-origin *; proxy_pass http://127.0.0.1:8082;#将api路径下的请求转发到后端 proxy_connect_timeout 1800; proxy_read_timeout 1800; proxy_send_timeout 1800; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Origin $host:$server_port; proxy_set_header Referer $host:$server_port; proxy_set_header Accept-Encoding \u0026#34;\u0026#34;; # 去除/api/前缀 rewrite ^/api/(.*)$ /$1 break; } } 注释【1】：让Nginx在443端口上监听HTTPS请求，并使用SSL/TLS协议加密通信内容，同时使用HTTP/2协议。 注释【2】：首先，Nginx会尝试将请求的URI作为文件路径，如果这个文件存在，就直接返回这个文件的内容。\n如果文件不存在，Nginx会尝试将请求的URI作为目录路径，如果这个目录存在，就返回这个目录的默认页面。\n如果文件和目录都不存在，Nginx会返回/index.html这个文件的内容。 注释【3】：^~是一个匹配修饰符，表示如果这个location的前缀匹配到请求，那么就立即停止搜索其他location，处理这个请求。\n/api/是location的匹配规则，表示所有以/api/开头的请求都会被这个location处理。\n在这个location块中，所有以/api/开头的请求都会被反向代理到http://127.0.0.1:8888，并且/api/前缀会被去除。这是通过proxy_pass和rewrite两个指令实现的。 后端部署 在/var/www/html/project_name/api/下上传代码。\n配置nginx 这个后端的Nginx配置写得不好。server里实际可以不需要指定二级域名（api.domain.com)，只需要指定端口就可以了。这个二级域名在项目实际运行当中，并没有直接使用。 后端的接口调用都是通过前端的Nginx转发的。这个域名没用但解析了，不大安全。改进方法待定。\nserver { listen 80; server_name api.domain.com; return 301 https://$host$request_uri; } server { listen 443 ssl http2; server_name api.domain.com; # Certificates ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; access_log /var/log/nginx/api.domain.com-access.log; error_log /var/log/nginx/api.domain.com-error.log; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host; proxy_pass http://localhost:8082; } } server { listen 8082; server_name api.domain.com; root /var/www/html/project_name/api/public; charset utf-8; autoindex off; location / { add_header Access-Control-Allow-Origin \u0026#39;*\u0026#39;; add_header Access-Control-Allow-Methods \u0026#39;GET, POST, OPTIONS, PUT, DELETE\u0026#39;; add_header Access-Control-Allow-Headers \u0026#39;x-token,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Authorization\u0026#39;; if ($request_method = \u0026#39;OPTIONS\u0026#39;) { return 204; } proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-PORT $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; location / { # !-e 判断的是目录或文件是否不存在，不存在时则重写 # !-f 判断的是文件是否不存在，不存在时则重写 if (!-f $request_filename) { # 路由重写 - 一律重写至 index.php 下，由项目代码进行路由定义 rewrite ^/(.*)$ /index.php?s=$1 last; break; } } location ~ \\.php$ { include fastcgi_params; include fastcgi.conf; fastcgi_pass fastcgi_backend; fastcgi_intercept_errors on; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name; } } } 遇到的问题 如何将文件上传到服务器 我文件上传一般习惯用xftp,但是project_name目录下的文件夹权限是www-data，而我当前的登录用户名是ubuntu。所以我用xftp上传文件时会报错。\n解决方法：切换到www-data用户，给自己添加认证信息，然后再用xftp上传文件。\nsudo su www-data vim ~/.ssh/authorized_keys 将自己的公钥添加到authorized_keys文件中。\nPS: 如果登录方式不是SSH可以略过。\n需要一个SSL证书 解决方法：使用Let\u0026rsquo;s Encrypt免费SSL证书。\n","date":"2023-12-23T18:05:16+08:00","permalink":"https://WangDouble-Dev.github.io/post/online_deployment/","section":"post","tags":null,"title":"前后端分离PHP项目线上部署记录"},{"categories":["Docker"],"contents":"运行环境 操作系统：CentOS Linux 8 Docker：Docker Engine - Community 24.0.7 参考网站 Docker如何打包软件 PHP镜像 MySQL镜像 Nginx镜像 Dockerfile reference 具体操作 方案1：使用现成的Docker Compose文件 拉取指定分支（lnump）的文件。\ngit clone -b lnmp https://github.com/WangDouble-Dev/docker.git 进入docker-compose.yml所在目录，执行docker-compose up -d命令。-d参数表示后台运行。\n验证 浏览器访问 http://localhost:8080 ,显示nginx 403 Forbidden。说明nginx已经启动。 浏览器访问 http://localhost:8080/test.php ,显示phpinfo信息。说明php已经启动。 命令行执行docker exec -it \u0026lt;container_name_or_id\u0026gt; mysql -uroot -p123456,\u0026lt;container_name_or_id\u0026gt;是你的Docker MySql服务的容器ID。 能够正常连接，说明mysql已经启动。 docker-compose.yml 字段说明 字段 说明 ports 端口映射，本机端口：docker端口。只能改本机。 volumes 文件夹映射，本机目录：docker目录。只能改本机 MYSQL_ROOT_PASSWORD mysql root用户默认密码 注意事项 由于代码跑在docker里，所以 localhost 和 127.0.0.1不再可用。如需要连接mysql，应使用如下地址：\nmysql-server 方案2：自己编写Dockerfile和docker-compose.yml文件 以后再写\n","date":"2023-12-10T20:51:53+08:00","permalink":"https://WangDouble-Dev.github.io/post/docker_php_env/","section":"post","tags":["Docker","CentOS","PHP"],"title":"CentOS下使用Docker搭建LNMP开发环境"},{"categories":["Docker"],"contents":" 仅记录自己学习Docker的过程。安装的是Docker Engine不是Desktop。\n运行环境 操作系统：CentOS Linux 8 参考网站 官方CentOS下载Docker Engine指引 执行步骤 配置repository 用于安装和更新Docker。\nsudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 安装Docker Engine sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 启动Docker sudo systemctl start docker 可用sudo systemctl status docker查看Docker状态。\n测试Docker sudo docker run hello-world 当你执行 sudo docker run hello-world 命令时，Docker 会做以下几件事：\nDocker 会在本地查找名为 \u0026ldquo;hello-world\u0026rdquo; 的镜像。 如果在本地没有找到，Docker 会去 Docker Hub（默认的 Docker 镜像仓库）下载 \u0026ldquo;hello-world\u0026rdquo; 镜像。 Docker 会创建一个新的容器，并在这个容器中运行 \u0026ldquo;hello-world\u0026rdquo; 镜像。 \u0026ldquo;hello-world\u0026rdquo; 镜像在下载后存储在 Docker 的镜像库中。你可以通过 docker images 命令查看所有的 Docker 镜像。\n\u0026ldquo;hello-world\u0026rdquo; 容器在运行后会存在于 Docker 的容器列表中，即使它已经停止运行。你可以通过 docker ps -a 命令查看所有的 Docker 容器，包括已经停止运行的。\n所以，\u0026ldquo;hello-world\u0026rdquo; 镜像存储在 Docker 的镜像库中，而 \u0026ldquo;hello-world\u0026rdquo; 容器存储在 Docker 的容器列表中。\n删除指定镜像和容器 如果你想删除本地的 \u0026ldquo;hello-world\u0026rdquo; 镜像和容器，你可以按照以下步骤操作：\n首先，你需要找到 \u0026ldquo;hello-world\u0026rdquo; 容器的 ID。你可以通过运行 docker ps -a 命令来查看所有的 Docker 容器，包括已经停止运行的。找到 \u0026ldquo;hello-world\u0026rdquo; 容器的 ID 后，你可以使用 docker rm 命令来删除它。\n然后，你需要找到 \u0026ldquo;hello-world\u0026rdquo; 镜像的 ID。你可以通过运行 docker images 命令来查看所有的 Docker 镜像。找到 \u0026ldquo;hello-world\u0026rdquo; 镜像的 ID 后，你可以使用 docker rmi 命令来删除它。\n删除指定镜像 sudo docker rmi [image id] 删除指定容器 sudo docker rm [container id] 卸载 卸载Docker sudo yum remove docker-ce docker-ce-cli containerd.io 删除所有镜像、容器、卷和自定义配置 sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd ","date":"2023-12-10T13:42:49+08:00","permalink":"https://WangDouble-Dev.github.io/post/docker_install/","section":"post","tags":["Docker","CentOS"],"title":"CentOS下安装Docker"},{"categories":null,"contents":" 温柔可爱美丽善良落落大方，善解人意，爱心十足，爱自己爱家人，人群中最靓的那个，beautiful ！！ —— 任先生\n","date":"2023-12-09T21:18:39+08:00","permalink":"https://WangDouble-Dev.github.io/about/","section":"","tags":null,"title":"About Me"},{"categories":["其它"],"contents":"主要步骤 1. 在电脑上安装Http Toolkit Http Toolkit Windows端下载地址\n2. 在电脑上安装夜神模拟器 夜神模拟器下载地址\n3. 下载Http Toolkit Android端 可以在谷歌应用商店下载。不支持谷歌应用商店的手机可以在APKPure下载。\n4. 在夜神模拟器中安装Http Toolkit Android端 将下载好的apk文件拖入夜神模拟器中即可。\n5. 开始抓包 在电脑上打开Http Toolkit，选择Android Device via ADB。 然后切换到夜神模拟器中，打开Http Toolkit，会提示是否信任证书，直接点击确定。就能获取到抓包数据了。 常见问题 1. 为什么不用Http Toolkit的Android Device via QR Code？使用起来更便捷，也不用安装夜神模拟器。 因为现在手机的安卓版本普遍较高。在Android 7.0及以上的系统中，就算你安装了Http Toolkit的证书，手机内的应用也不会信任它。而使用Android Device via ADB能避免这个问题。详情请看这里。\n2. 一定要用夜神模拟器吗？其他安卓模拟器不行吗？ 也可以。只要打开你的安卓模拟器之后，Android Device via ADB图标正常显示就可以使用。\n图标这样是不能使用的。\n注意事项 要模拟器开着的情况下，Http Toolkit的Android Device via ADB图标才会正常显示。 要使用Android Device via ADB，设备是需要Root过的。所以最好选择的安卓模拟器是支持Root设置或支持ADB的。这也是我选择夜神模拟器的原因。 其他注意事项请看这里。 ","date":"2023-10-21T23:03:03+08:00","permalink":"https://WangDouble-Dev.github.io/post/http_toolkit_android/","section":"post","tags":["Http Toolkit","Android"],"title":"使用Http Toolkit Android抓包的简易方法"},{"categories":["Guide"],"contents":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don’t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren’t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo’s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015.\n","date":"2023-02-16T18:58:11+08:00","permalink":"https://WangDouble-Dev.github.io/post/markdown_syntax_guide/","section":"post","tags":null,"title":"Markdown Syntax Guide"}]